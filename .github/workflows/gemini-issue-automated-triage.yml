name: '🏷️ Gemini Automated Issue Triage'

on:
  issues:
    types:
      - 'opened'
      - 'reopened'
  issue_comment:
    types:
      - 'created'
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'issue number to triage'
        required: true
        type: 'number'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  triage-issue:
    if: |-
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '@gemini-cli /triage') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get Repository Labels'
        id: 'get_labels'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const labelNames = labels.map(label => label.name);
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;

      - name: 'Get Issue Details'
        id: 'get_issue'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const issue_number = ${{ github.event.issue.number || inputs.issue_number }};
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            
            // Clean and prepare the issue data
            const title = (issue.title || '').replace(/"/g, '\\"');
            const body = (issue.body || '').replace(/"/g, '\\"').substring(0, 8000); // Limit body length
            
            core.setOutput('issue_title', title);
            core.setOutput('issue_body', body);
            core.setOutput('issue_number', issue_number);
            
            core.info(`Issue #${issue_number}: ${title}`);
            return { title, body, number: issue_number };

      - name: 'Run Gemini Issue Analysis'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_issue_analysis'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": ${{ fromJSON(env.DEBUG || env.ACTIONS_STEP_DEBUG || false) }},
              "maxSessionTurns": 1,
              "systemInstruction": "You are an issue triage assistant. You MUST respond ONLY with valid JSON in the exact format requested. Do not include any other text, explanations, or interactive prompts.",
              "temperature": 0.1,
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          prompt: |-
            Analyze this GitHub issue and return ONLY a JSON object with appropriate labels.

            AVAILABLE LABELS: ${{ steps.get_labels.outputs.available_labels }}

            ISSUE TITLE: "${{ steps.get_issue.outputs.issue_title }}"

            ISSUE BODY: "${{ steps.get_issue.outputs.issue_body }}"

            INSTRUCTIONS:
            1. Review the available labels above
            2. Analyze the issue title and body
            3. Select the most appropriate existing labels
            4. Return ONLY valid JSON in this exact format:

            {"labels_to_set": ["label1", "label2"], "explanation": "Brief explanation"}

            OR if no labels apply:

            {"labels_to_set": [], "explanation": "Unable to classify with available labels"}

            IMPORTANT: 
            - Return ONLY the JSON object, nothing else
            - Use only labels that exist in the AVAILABLE LABELS list
            - Do not include markdown code blocks
            - Do not include any explanatory text outside the JSON

      - name: 'Debug Gemini Output'
        if: always()
        run: |-
          echo "=== GEMINI OUTPUT DEBUG ==="
          echo "Summary length: ${#GEMINI_SUMMARY}"
          echo "First 200 chars:"
          echo "${GEMINI_SUMMARY:0:200}"
          echo "==========================="
          
          # Check for common issues
          if [[ "$GEMINI_SUMMARY" == *"Data collection is disabled"* ]]; then
            echo "❌ Gemini returned data collection message"
          fi
          
          if [[ "$GEMINI_SUMMARY" == *"What would you like to do"* ]]; then
            echo "❌ Gemini returned interactive prompt"
          fi
          
          if [[ "$GEMINI_SUMMARY" =~ ^\{.*\}$ ]]; then
            echo "✅ Output appears to be JSON"
          else
            echo "❌ Output does not appear to be JSON"
          fi
        env:
          GEMINI_SUMMARY: '${{ steps.gemini_issue_analysis.outputs.summary }}'

      - name: 'Apply Labels to Issue'
        if: |-
          ${{ steps.gemini_issue_analysis.outputs.summary != '' && 
              !contains(steps.gemini_issue_analysis.outputs.summary, 'Data collection is disabled') &&
              !contains(steps.gemini_issue_analysis.outputs.summary, 'What would you like to do') }}
        env:
          REPOSITORY: '${{ github.repository }}'
          ISSUE_NUMBER: '${{ steps.get_issue.outputs.issue_number }}'
          LABELS_OUTPUT: '${{ steps.gemini_issue_analysis.outputs.summary }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const rawLabels = process.env.LABELS_OUTPUT;
            core.info(`Raw labels output: ${rawLabels}`);
            
            // Validate that we have something that looks like JSON
            if (!rawLabels || rawLabels.trim().length === 0) {
              core.warning('Empty output from Gemini');
              return;
            }
            
            // Check for common non-JSON responses
            const problematicPhrases = [
              'Data collection is disabled',
              'What would you like to do',
              'Okay, I\'m ready',
              'For example, you can ask me'
            ];
            
            for (const phrase of problematicPhrases) {
              if (rawLabels.includes(phrase)) {
                core.warning(`Gemini returned interactive response containing: "${phrase}"`);
                core.info('This suggests the prompt was not processed correctly. Check Gemini CLI configuration.');
                return;
              }
            }
            
            let parsedLabels;
            try {
              // Clean the output - remove any markdown code blocks and extra whitespace
              let cleanedOutput = rawLabels
                .replace(/^```(?:json)?\s*/, '')
                .replace(/\s*```$/, '')
                .trim();
              
              // Additional cleaning - remove any text before the first { or after the last }
              const firstBrace = cleanedOutput.indexOf('{');
              const lastBrace = cleanedOutput.lastIndexOf('}');
              
              if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
                cleanedOutput = cleanedOutput.substring(firstBrace, lastBrace + 1);
              }
              
              core.info(`Cleaned JSON: ${cleanedOutput}`);
              parsedLabels = JSON.parse(cleanedOutput);
              
              // Validate the expected structure
              if (!parsedLabels.hasOwnProperty('labels_to_set') || !Array.isArray(parsedLabels.labels_to_set)) {
                throw new Error('Invalid JSON structure: missing or invalid labels_to_set array');
              }
              
              core.info(`Successfully parsed labels: ${JSON.stringify(parsedLabels)}`);
              
            } catch (err) {
              core.warning(`Failed to parse labels JSON: ${err.message}`);
              core.info(`Raw output was: ${rawLabels}`);
              core.info('Skipping label assignment due to parsing error');
              return;
            }

            const issueNumber = parseInt(process.env.ISSUE_NUMBER);

            // Validate that all labels exist in the repository
            const { data: repoLabels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const validLabels = repoLabels.map(label => label.name);
            const invalidLabels = parsedLabels.labels_to_set.filter(label => !validLabels.includes(label));
            
            if (invalidLabels.length > 0) {
              core.warning(`Invalid labels detected: ${invalidLabels.join(', ')}`);
              core.info(`Valid labels are: ${validLabels.join(', ')}`);
              // Filter out invalid labels
              parsedLabels.labels_to_set = parsedLabels.labels_to_set.filter(label => validLabels.includes(label));
            }

            // Set labels based on triage result
            if (parsedLabels.labels_to_set && parsedLabels.labels_to_set.length > 0) {
              try {
                await github.rest.issues.setLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: parsedLabels.labels_to_set
                });
                const explanation = parsedLabels.explanation ? ` - ${parsedLabels.explanation}` : '';
                core.info(`✅ Successfully set labels for #${issueNumber}: ${parsedLabels.labels_to_set.join(', ')}${explanation}`);
              } catch (err) {
                core.setFailed(`Failed to set labels: ${err.message}`);
              }
            } else {
              // If no labels to set, leave the issue as is
              const explanation = parsedLabels.explanation ? ` - ${parsedLabels.explanation}` : '';
              core.info(`No labels to set for #${issueNumber}, leaving as is${explanation}`);
            }

      - name: 'Post Issue Analysis Failure Comment'
        if: |-
          ${{ failure() && (steps.gemini_issue_analysis.outcome == 'failure' || steps.get_issue.outcome == 'failure') }}
        env:
          ISSUE_NUMBER: '${{ steps.get_issue.outputs.issue_number || github.event.issue.number || inputs.issue_number }}'
          RUN_URL: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
            if (isNaN(issueNumber)) {
              core.error('Invalid issue number for failure comment');
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `🚨 **Issue Triage Failed**

There was a problem with the Gemini CLI issue triaging system. Please check the [action logs](${process.env.RUN_URL}) for details.

This issue will need to be manually triaged.`
            });

      - name: 'Post Success Comment (Optional)'
        if: |-
          ${{ success() && 
              steps.gemini_issue_analysis.outputs.summary != '' && 
              !contains(steps.gemini_issue_analysis.outputs.summary, 'Data collection is disabled') &&
              vars.POST_SUCCESS_COMMENTS == 'true' }}
        env:
          ISSUE_NUMBER: '${{ steps.get_issue.outputs.issue_number }}'
          LABELS_OUTPUT: '${{ steps.gemini_issue_analysis.outputs.summary }}'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            try {
              const rawLabels = process.env.LABELS_OUTPUT;
              const cleanedOutput = rawLabels.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '').trim();
              const parsedLabels = JSON.parse(cleanedOutput);
              
              if (parsedLabels.labels_to_set && parsedLabels.labels_to_set.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(process.env.ISSUE_NUMBER),
                  body: `🤖 **Automated Triage Complete**

This issue has been automatically triaged and labeled: ${parsedLabels.labels_to_set.map(l => `\`${l}\``).join(', ')}

${parsedLabels.explanation ? `**Reasoning:** ${parsedLabels.explanation}` : ''}

_This was done automatically by Gemini AI. If you believe the labels are incorrect, please feel free to modify them._`
                });
              }
            } catch (err) {
              core.info(`Could not post success comment: ${err.message}`);
            }